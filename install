#!/bin/bash

# Script to bootstrap my dev environment.  This installs required tools and sets
# up various dotfiles. This also assumes it is a barebones Linux machine with
# bash available.

# It does the following -
# - Install required software packages for development (e.g. zsh, tmux, vim, git
# etc.)
# - Create symlinks. The standard config files/dotfiles in $HOME are symlinked
# to files in this # repo.

set -euo pipefail

# Core requirements for my environ
CORE_REQUIREMENTS=(
  git
  alacritty
  zsh
  openssh
  tmux
  tmuxp
  htop
  tree
  bat
  neovim
  emacs
  ripgrep
  fd
  fzf
  ttf-iosevka-nerd
)

is_installed() {
  req="$1"
  if $(pacman -Qi "$req" > /dev/null); then # if found
    return 0
  else
    return 1
  fi
}

check_core_requirements() {
  for req in "${CORE_REQUIREMENTS[@]}"
  do
    echo "Check if $req is installed.."
    if ! $(is_installed "$req"); then
      echo "$req is not installed; adding to to_install"
      to_install=( "${to_install[@]}" $req )
    fi
  done
  if [[ -z "${to_install[@]}" ]]; then
    echo "All requirements satisfy.."
    return 0
  else
    return 1
  fi
}

check_package_manager() {
  # Check if current system is Arch-based; if not, abort
  if $(is_installed pacman); then # arch-based distro
    return 0;
  else
    echo "Oops, not an Arch-based system! Currently on Arch-based distros are supported."
    echo "Feel free to submit a PR, if you want to add new support."
    exit 1
  fi
}

install_core_requirements() {
  check_package_manager
  packages=(${to_install[@]})
  echo "Packages to be insalled: ${packages[@]}"
  read -p "Continue? [y/N]: "

  if [ "$REPLY" != "y" ]; then
    echo "Installation aborted."
    exit 0
  fi

  echo "sudo pacman -S ${packages[@]}"
  sudo pacman -S --noconfirm ${packages[@]}
}

create_symlinks() {
  local dotfiles="$HOME/dotfiles"
  mkdir -p "$HOME/.stack/templates"

  echo "Creating symlinks for necessary files..."

  declare -A symlinks=(
    # Alacritty
    ["$dotfiles/alacritty/alacritty.toml"]="~/.config/alacritty.toml"

    # Doom Emacs
    ["$dotfiles/doom.d"]="$HOME/.doom.d"

    # Vim
    ["$dotfiles/vim"]="~/.vim"
    ["$dotfiles/vim/vimrc"]="~/.vimrc"

    # Zsh
    # ["$dotfiles/zsh/omz_zshrc.zsh"]="~/.zshrc"
    ["$dotfiles/zsh/zinit_zshrc.zsh"]="~/.zshrc"
    ["$dotfiles/zsh/zshenv"]="~/.zshenv"

    # Tmux
    ["$dotfiles/tmux/tmux.conf"]="~/.tmux.conf"
    ["$dotfiles/tmux/tmuxp"]="~/.tmuxp"

    # Git
    ["$dotfiles/git/gitconfig"]="~/.gitconfig"

    # Shell
    ["$dotfiles/shell/aliases"]="~/.aliases"

    # Haskell Stack
    ["$dotfiles/stack/config.yaml"]="~/.stack/config.yaml"
    ["$dotfiles/stack/anonray.hsfiles"]="~/.stack/templates/anonray.hsfiles"
  )

  for src in "${!symlinks[@]}"; do
    local target="${symlinks[$src]}"
    echo "Linking: $src â†’  $target"
    ln -sf "$src" "$target"
  done
}

# install extra tools that are not in the package manager; git clone and install step..
install_from_git_repo() {
  name="$1"
  repo_url="$2"
  clone_dir="$3"
  if [[ -z "$name" || -z "$repo_url" || -z "$clone_dir" ]]; then
    echo "WARN: Not all required arguments are passed to $0"
    echo "WARN: Skipping git clone..."
    return;
  fi
  echo "Cloning $name.."
  git clone --depth 1 "$repo_url" "$clone_dir"
}

DOOM_EMACS_DIR="$HOME/.emacs.d"
install_doom_emacs() {
  echo "Installing doom emacs..."
  install_from_git_repo "doom emacs" "https://github.com/doomemacs/doomemacs" ${DOOM_EMACS_DIR}
  echo "Setting up doom emacs..."
  sleep 1
  ~/.emacs.d/bin/doom sync
}

ALACRITTY_THEMES_DIR="$HOME/.config/alacritty/themes"
install_alacritty_themes() {
  echo "Installing alacritty themes..."
  install_from_git_repo "alacritty themes" "https://github.com/alacritty/alacritty-theme" ${ALACRITTY_THEMES_DIR}
}

set_zsh_default() {
  echo "Setting zsh to be default shell.."
  sudo chsh -s "$(which zsh)" "$(whoami)"
}

# main install function
install() {
  # Step 1: install core requirements..
  if ! check_core_requirements; then
    echo "Installing core requirements.."
    install_core_requirements
  fi
  # Step 2: check and set zsh to be default shell
  if [[ "$SHELL" != *zsh* ]]; then
    echo "Zsh is not default shell. Setting.."
    set_zsh_default
  fi
  # Step 3: setup the symlinks..
  create_symlinks
  # Step 4: manual install of alacritty themes..
  if [[ ! -d ${ALACRITTY_THEMES_DIR} ]]; then
    echo "Alacritty themes not installed, installing..."
    install_alacritty_themes
  fi
  # Step 5: manual install of doom emacs..
  if [[ ! -d ${DOOM_EMACS_DIR} ]]; then
    echo "Doom emacs not installed, installing..."
    install_doom_emacs
  fi
  echo "Done"
}

install
